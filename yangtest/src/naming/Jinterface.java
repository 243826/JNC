/* 
 * @(#)Jinterface.java        1.0 13/7/12
 *
 * This file has been auto-generated by JPyang, the Java output format plug-in
 * of pyang. Origin: module "namingTest", revision: "unknown".
 */

package naming;

import com.tailf.confm.*;
import com.tailf.inm.*;
import java.util.Hashtable;

/**
 * This class represents a "Jinterface" element
 * from the namespace http://test.com/ns/naming-test/1.0
 *
 * @version    1.0 2012-7-13
 * @author    Auto Generated
 */
public class Jinterface extends Container {

    /**
     * Constructor for an empty Jinterface object.
     */
    public Jinterface() {
        super(Naming-test.NAMESPACE, "Jinterface");
        setDefaultPrefix();
        setPrefix(Naming-test.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Object clone() {
        return (Jinterface)cloneContent(new Jinterface());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Element cloneShallow() {
        return cloneShallowContent(new Jinterface());
    }

    /**
     * Structure information which specifies
     * the keys for the list entries.
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * Structure information with the names of the children.
     * Makes it possible to order the children.
     */
    public String[] childrenNames() {
        return new String[] {
            "abstractDefault",
            "Capital"
        };
    }

    /**
     * -------------------------------------------------------
     * Access methods for optional leaf child: "abstractDefault".
     * -------------------------------------------------------
     */

    /**
     * Return the value for child leaf "abstractDefault".
     * @return The value of the leaf.
     */
    public com.tailf.confm.xs.Boolean getAbstractDefaultValue()
        throws INMException {
        return (com.tailf.confm.xs.Boolean)getValue("abstractDefault");
    }

    /**
     * Sets the value for child leaf "abstractDefault",
     * using the java primitive value.
     * @param abstractDefaultValue The value to set.
     */
    public void setAbstractDefaultValue(com.tailf.confm.xs.Boolean abstractDefaultValue)
        throws INMException {
        setLeafValue(Naming-test.NAMESPACE,
            "abstractDefault",
            abstractDefaultValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "abstractDefault", using a string value.
     * @param abstractDefaultValue The string representation of the value to set.
     */
    public void setAbstractDefaultValue(String abstractDefaultValue)
        throws INMException {
        setAbstractDefaultValue(new com.tailf.confm.xs.Boolean(abstractDefaultValue));
    }

    /**
     * Sets the value for child leaf "abstractDefault",
     * using the java primitive value.
     * @param abstractDefaultValue The value to set.
     */
    public void setAbstractDefaultValue(boolean abstractDefaultValue)
        throws INMException {
        setAbstractDefaultValue(new com.tailf.confm.xs.Boolean(abstractDefaultValue));
    }

    /**
     * Unsets the value for child leaf "abstractDefault".
     */
    public void unsetAbstractDefaultValue()
        throws INMException {
        delete("abstractDefault");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "abstractDefault" leaf will not have a value.
     */
    public void addAbstractDefault()
        throws INMException {
        setLeafValue(Naming-test.NAMESPACE,
            "abstractDefault",
            null,
            childrenNames());
    }

    /**
     * Marks the "abstractDefault" leaf with operation "replace".
     */
    public void markAbstractDefaultReplace()
        throws INMException {
        markLeafReplace("abstractDefault");
    }

    /**
     * Marks the "abstractDefault" leaf with operation "merge".
     */
    public void markAbstractDefaultMerge()
        throws INMException {
        markLeafMerge("abstractDefault");
    }

    /**
     * Marks the "abstractDefault" leaf with operation "create".
     */
    public void markAbstractDefaultCreate()
        throws INMException {
        markLeafCreate("abstractDefault");
    }

    /**
     * Marks the "abstractDefault" leaf with operation "delete".
     */
    public void markAbstractDefaultDelete()
        throws INMException {
        markLeafDelete("abstractDefault");
    }

    /**
     * -------------------------------------------------------
     * Access methods for optional leaf child: "Capital".
     * -------------------------------------------------------
     */

    /**
     * Return the value for child leaf "Capital".
     * @return The value of the leaf.
     */
    public src.naming.City-string getCapitalValue()
        throws INMException {
        return (src.naming.City-string)getValue("Capital");
    }

    /**
     * Sets the value for child leaf "Capital", using the java primitive value.
     * @param CapitalValue The value to set.
     */
    public void setCapitalValue(src.naming.City-string CapitalValue)
        throws INMException {
        setLeafValue(Naming-test.NAMESPACE,
            "Capital",
            CapitalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "Capital", using a string value.
     * @param CapitalValue The string representation of the value to set.
     */
    public void setCapitalValue(String CapitalValue)
        throws INMException {
        setCapitalValue(new src.naming.City-string(CapitalValue));
    }

    /**
     * Sets the value for child leaf "Capital", using the java primitive value.
     * @param CapitalValue The value to set.
     */
    public void setCapitalValue(city-string CapitalValue)
        throws INMException {
        setCapitalValue(new src.naming.City-string(CapitalValue));
    }

    /**
     * Unsets the value for child leaf "Capital".
     */
    public void unsetCapitalValue()
        throws INMException {
        delete("Capital");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "Capital" leaf will not have a value.
     */
    public void addCapital()
        throws INMException {
        setLeafValue(Naming-test.NAMESPACE,
            "Capital",
            null,
            childrenNames());
    }

    /**
     * Marks the "Capital" leaf with operation "replace".
     */
    public void markCapitalReplace()
        throws INMException {
        markLeafReplace("Capital");
    }

    /**
     * Marks the "Capital" leaf with operation "merge".
     */
    public void markCapitalMerge()
        throws INMException {
        markLeafMerge("Capital");
    }

    /**
     * Marks the "Capital" leaf with operation "create".
     */
    public void markCapitalCreate()
        throws INMException {
        markLeafCreate("Capital");
    }

    /**
     * Marks the "Capital" leaf with operation "delete".
     */
    public void markCapitalDelete()
        throws INMException {
        markLeafDelete("Capital");
    }

}