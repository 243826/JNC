/* 
 * @(#)C.java        1.0 10/7/12
 *
 * This file has been auto-generated by JPyang, the Java output format plug-in
 * of pyang. Origin: module "containerTest", revision: "unknown".
 */

package cont;

import com.tailf.confm.*;
import com.tailf.inm.*;
import java.util.Hashtable;

/**
 * This class represents a "c" element
 * from the namespace http://test.com/ns/cont/1.0
 *
 * @version    1.0 2012-7-10
 * @author    Auto Generated
 */
public class C extends Container {

    /**
     * Constructor for an empty C object.
     */
    public C() {
        super(Cont.NAMESPACE, "c");
        setDefaultPrefix();
        setPrefix(Cont.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Object clone() {
        return (C)cloneContent(new C());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Element cloneShallow() {
        return cloneShallowContent(new C());
    }

    /**
     * Structure information which specifies
     * the keys for the list entries.
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * Structure information with the names of the children.
     * Makes it possible to order the children.
     */
    public String[] childrenNames() {
        return new String[] {
            "d",
            "s"
        };
    }

    /**
     * -------------------------------------------------------
     * Access methods for optional leaf child: "d".
     * -------------------------------------------------------
     */

    /**
     * Return the value for child leaf "d".
     * @return The value of the leaf.
     */
    public com.tailf.confm.xs.UnsignedLong getDValue()
        throws INMException {
        return (com.tailf.confm.xs.UnsignedLong)getValue("d");
    }

    /**
     * Sets the value for child leaf "d", using the java primitive value.
     * @param dValue The value to set.
     */
    public void setDValue(com.tailf.confm.xs.UnsignedLong dValue)
        throws INMException {
        setLeafValue(Cont.NAMESPACE,
            "d",
            dValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "d", using a string value.
     * @param dValue The string representation of the value to set.
     */
    public void setDValue(String dValue)
        throws INMException {
        setDValue(new com.tailf.confm.xs.UnsignedLong(dValue));
    }

    /**
     * Sets the value for child leaf "d", using the java primitive value.
     * @param dValue The value to set.
     */
    public void setDValue(long dValue)
        throws INMException {
        setDValue(new com.tailf.confm.xs.UnsignedLong(dValue));
    }

    /**
     * Unsets the value for child leaf "d".
     */
    public void unsetDValue()
        throws INMException {
        delete("d");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "d" leaf will not have a value.
     */
    public void addD()
        throws INMException {
        setLeafValue(Cont.NAMESPACE,
            "d",
            null,
            childrenNames());
    }

    /**
     * Marks the "d" leaf with operation "replace".
     */
    public void markDReplace()
        throws INMException {
        markLeafReplace("d");
    }

    /**
     * Marks the "d" leaf with operation "merge".
     */
    public void markDMerge()
        throws INMException {
        markLeafMerge("d");
    }

    /**
     * Marks the "d" leaf with operation "create".
     */
    public void markDCreate()
        throws INMException {
        markLeafCreate("d");
    }

    /**
     * Marks the "d" leaf with operation "delete".
     */
    public void markDDelete()
        throws INMException {
        markLeafDelete("d");
    }

    /**
     * -------------------------------------------------------
     * Access methods for optional leaf child: "s".
     * -------------------------------------------------------
     */

    /**
     * Return the value for child leaf "s".
     * @return The value of the leaf.
     */
    public com.tailf.confm.xs.String getSValue()
        throws INMException {
        return (com.tailf.confm.xs.String)getValue("s");
    }

    /**
     * Sets the value for child leaf "s", using the java primitive value.
     * @param sValue The value to set.
     */
    public void setSValue(com.tailf.confm.xs.String sValue)
        throws INMException {
        setLeafValue(Cont.NAMESPACE,
            "s",
            sValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "s", using a string value.
     * @param sValue The string representation of the value to set.
     */
    public void setSValue(String sValue)
        throws INMException {
        setSValue(new com.tailf.confm.xs.String(sValue));
    }

    /**
     * Unsets the value for child leaf "s".
     */
    public void unsetSValue()
        throws INMException {
        delete("s");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "s" leaf will not have a value.
     */
    public void addS()
        throws INMException {
        setLeafValue(Cont.NAMESPACE,
            "s",
            null,
            childrenNames());
    }

    /**
     * Marks the "s" leaf with operation "replace".
     */
    public void markSReplace()
        throws INMException {
        markLeafReplace("s");
    }

    /**
     * Marks the "s" leaf with operation "merge".
     */
    public void markSMerge()
        throws INMException {
        markLeafMerge("s");
    }

    /**
     * Marks the "s" leaf with operation "create".
     */
    public void markSCreate()
        throws INMException {
        markLeafCreate("s");
    }

    /**
     * Marks the "s" leaf with operation "delete".
     */
    public void markSDelete()
        throws INMException {
        markLeafDelete("s");
    }

}