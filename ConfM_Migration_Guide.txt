ConfM Migration Guide
=====================

The purpose of this document is to provide a step-by-step guide for how to
make a transition from using INM and/or ConfM, to using JNC instead. The JNC
library is based on both the INM and the ConfM Java libraries and even though
large portions of the code is rewritten, the basic functionality is still the
same. The JNC pyang plugin is a counterpart of the confdc compiler of ConfM.
This means that in principle, anything that could be done using INM and ConfM
can also be done with JNC.


----- The JNC library overview

To get an understanding of what has changed, one can think of JNC as a merge of
the INM and ConfM libraries, with better support for YANG. The XML schema type
classes of ConfM have been replaced by implementations of the built in YANG
types implementing a YangType interface, and all classes are now placed in a
single package - com.tailf.jnc - instead of the previous multiple package
structure (com.tailf.confm.confd, com.tailf.inm, com.tailf.confm.xs, etc.).
This means that instead of writing Java code containing imports of INM and
ConfM classes, a single import of com.tailf.jnc.* will suffice, although it
should be noted that explicit imports of the classes is usually preferred to
"import on demand".

Apart from the new type classes, there are also some name changes in the JNC
library compared to the INM and ConfM libraries. The classes generated using
the JNC pyang plugin of course use the new names of the classes, but in some
cases, client code will also have to be changed because of this. In particular,
it is worth mentioning that the com.tailf.confm.Container class is replaced by
com.tailf.jnc.YangElement. ConfMException is renamed YangException, whereas
INMException is now called JNCException. Some classes have been removed, such
as ConfD, Yang and Xs from the ConfM library (previously used to access the old
type classes) and ConfDSession, TCPConnection and TCPSession from the INM
library (in JNC, NetconfSession, SSHConnection and SSHSession are always used
instead of these). The YANG type classes typically have the same name as the
built in YANG type, but CamelCased and prefixed with "Yang". They provide
useful methods to manipulate configuration data so it is worth considering
using them along with classes generated from typedefs in client code.

Regarding the changes in the code, most of them are merely cosmetic. Where
applicable; generics are now used instead of Objects and for-each loops instead
of indexed loops. The code has been reformatted and some javadoc comments have
been added or improved upon. There are however some changes that may have a
more serious impact on how to use the JNC library compared to ConfM. The
getPath method of the Element class has been renamed to getElementPath to avoid
conflict with getters of generated classes and the createInstance method of
YangElement (formerly known as the Container class) now uses the new methods
instantiate and getPackage to create YANG model aware tree nodes, with the
new package hierarchy of the generated classes.


----- The JNC pyang plugin overview

One of the most important differences between using the JNC pyang plugin
compared to the ConfM confdc compiler is that the generated classes are now
structured hierachically. This is primarily done to avoid naming conflicts, but
also has the benefit of making it easier to find out which YANG statement a
class was generated from. There can still be naming conflicts, for instance if
a top-level typedef, container, list or notification has the same name as the
module, but there is no longer any problem with substatements of different
statements having the same name. In the case of a conflict, the suggested
solution is to temporarily change the conflicting identifiers before generating
the classes.

Previously, when using the ConfM confdc compiler to generate Java classes from
YANG models, typically fxs files had to be generated before using the
--confm-emit-java option to generate the actual classes. There is no need for
this when using the JNC pyang plugin, since pyang parses the YANG files
directly. Naturally, build and make files of projects using INM/ConfM will have
to change slightly to invoke the JNC pyang plugin instead of confdc, but since
both applications are accessible from CLI and no additional information is
needed by the JNC pyang plugin compared to ComfM confdc, these will in most
cases be small changes.


----- Summary

In short, to use JNC instead of ConfM:
* Generate Java classes using the JNC pyang plugin instead of confdc.
* Replace all references to INM and ConfM classes with their JNC counterparts. 



