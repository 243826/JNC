/* 
 * @(#)Mini.java        1.0 3/8/12
 *
 * This file has been auto-generated by JPyang, the
 * Java output format plug-in of pyang.
 * Origin: module "mini", revision: "unknown".
 */

package gen;

import com.tailf.jnc.*;
import java.util.HashMap;

/**
 * The root class for namespace http://example.com/ns/mini/1.0 (accessible from 
 * Mini.NAMESPACE) with prefix "mini" (Mini.PREFIX).
 *
 * @version 1.0 2012-8-3
 * @author Auto Generated
 */
public class Mini  {

    public static final String NAMESPACE = "http://example.com/ns/mini/1.0";

    public static final String PREFIX = "mini";

    /**
     * Enable the elements in this namespace to be aware
     * of the data model and use the generated classes.
     */
    public static void enable() throws JNCException {
        YangElement.setPackage(NAMESPACE, PREFIX);
        Mini.registerSchema();
    }

    /**
     * Register the schema for this namespace in the global
     * schema table (CsTree) making it possible to lookup
     * CsNode entries for all tagpaths
     */
    public static void registerSchema() throws JNCException {
        StackTraceElement[] sTrace = (new Exception()).getStackTrace();
        ClassLoader loader = sTrace[0].getClass().getClassLoader();
        java.net.URL schemaUrl = loader.getResource("Mini.schema");
        SchemaParser parser = new SchemaParser();
        HashMap<Tagpath, SchemaNode> h = SchemaTree.create(NAMESPACE);
        if (schemaUrl == null)
            parser.readFile("Mini.schema", h);
        else
            parser.readFile(schemaUrl, h);
    }

}