/* 
 * @(#)L.java        1.0 3/8/12
 *
 * This file has been auto-generated by JPyang, the
 * Java output format plug-in of pyang.
 * Origin: module "mini", revision: "unknown".
 */

package gen;

import com.tailf.jnc.*;
import java.util.HashMap;

/**
 * This class represents a "l" element
 * from the namespace http://example.com/ns/mini/1.0
 *
 * @version 1.0 2012-8-3
 * @author Auto Generated
 */
public class L extends YangElement {

    /**
     * Constructor for an empty L object.
     */
    public L()
        throws JNCException {
        super(Mini.NAMESPACE, "l");
        setDefaultPrefix();
        setPrefix(Mini.PREFIX);
    }

    /**
     * Constructor for an initialized L object.
     * @param kValue Key argument of child.
     */
    public L(com.tailf.jnc.YangString kValue)
            throws JNCException {
        super(Mini.NAMESPACE, "l");
        // Set key element: k
        Leaf k = new Leaf(Mini.NAMESPACE, "k");
        k.setValue(kValue);
        insertChild(k, childrenNames());
        setDefaultPrefix();
        setPrefix(Mini.PREFIX);
    }

    /**
     * Constructor for an initialized L object.
     * with Strings for the keys.
     * @param kValue Key argument of child.
     */
    public L(String kValue)
            throws JNCException {
        super(Mini.NAMESPACE, "l");
        // Set key element: k
        Leaf k = new Leaf(Mini.NAMESPACE, "k");
        k.setValue(new String(kValue));
        insertChild(k, childrenNames());
        setDefaultPrefix();
        setPrefix(Mini.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Object clone() {
        try {
            return (L)cloneContent(new L(getKValue()));
        } catch (JNCException e) { return null; }
    }


    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Element cloneShallow() {
        try {
            return cloneShallowContent(new L(getKValue()));
        } catch (JNCException e) { return null; }
    }


    /**
     * Structure information which specifies
     * the keys for the list entries.
     */
    public String[] keyNames() {
        return new String[] {
            "k"
        };
    }

    /**
     * Structure information with the names of the children.
     * Makes it possible to order the children.
     */
    public String[] childrenNames() {
        return new String[] {
            "k"
        };
    }

    /**
     * -------------------------------------------------------
     * Access methods for key child: "k".
     * -------------------------------------------------------
     */

    /**
     * Return the value for child leaf "k".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getKValue()
        throws JNCException {
        return (com.tailf.jnc.YangString)getValue("k");
    }

    /**
     * Sets the value for child leaf "k", using the java primitive value.
     * @param kValue The value to set.
     */
    public void setKValue(com.tailf.jnc.YangString kValue)
        throws JNCException {
        setLeafValue(Mini.NAMESPACE,
            "k",
            kValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "k", using a string value.
     * @param kValue The string representation of the value to set.
     */
    public void setKValue(String kValue)
        throws JNCException {
        setKValue(new com.tailf.jnc.YangString(kValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "k" leaf will not have a value.
     */
    public void addK()
        throws JNCException {
        setLeafValue(Mini.NAMESPACE,
            "k",
            null,
            childrenNames());
    }

    /**
     * -------------------------------------------------------
     * Support method for addChild.
     * -------------------------------------------------------
     */

    /**
     * Adds a child to this object.
     */
    public void addChild(Element $child) {
        super.addChild($child);
        
    }

}