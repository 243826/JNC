/* 
 * @(#)C.java        1.0 3/8/12
 *
 * This file has been auto-generated by JPyang, the
 * Java output format plug-in of pyang.
 * Origin: module "identityRef", revision: "unknown".
 */

package gen;

import com.tailf.jnc.*;
import java.util.HashMap;

/**
 * This class represents a "c" element
 * from the namespace http://example.com/ns/idref/1.0
 *
 * @version 1.0 2012-8-3
 * @author Auto Generated
 */
public class C extends YangElement {

    /**
     * Constructor for an empty C object.
     */
    public C() {
        super(Idref.NAMESPACE, "c");
        setDefaultPrefix();
        setPrefix(Idref.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Object clone() {
        return (C)cloneContent(new C());
    }


    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Element cloneShallow() {
        return cloneShallowContent(new C());
    }


    /**
     * Structure information which specifies
     * the keys for the list entries.
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * Structure information with the names of the children.
     * Makes it possible to order the children.
     */
    public String[] childrenNames() {
        return new String[] {
            "refLeaf"
        };
    }

    /**
     * -------------------------------------------------------
     * Access methods for optional leaf child: "refLeaf".
     * -------------------------------------------------------
     */

    /**
     * Return the value for child leaf "refLeaf".
     * @return The value of the leaf.
     */
    public gen.MyType getRefLeafValue()
        throws JNCException {
        return (gen.MyType)getValue("refLeaf");
    }

    /**
     * Sets the value for child leaf "refLeaf", using the java primitive value.
     * @param refLeafValue The value to set.
     */
    public void setRefLeafValue(gen.MyType refLeafValue)
        throws JNCException {
        setLeafValue(Idref.NAMESPACE,
            "refLeaf",
            refLeafValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "refLeaf", using a string value.
     * @param refLeafValue The string representation of the value to set.
     */
    public void setRefLeafValue(String refLeafValue)
        throws JNCException {
        setRefLeafValue(new gen.MyType(refLeafValue));
    }

    /**
     * Sets the value for child leaf "refLeaf", using the java primitive value.
     * @param refLeafValue The value to set.
     */
    public void setRefLeafValue(Element refLeafValue)
        throws JNCException {
        setRefLeafValue(new gen.MyType(refLeafValue));
    }

    /**
     * Unsets the value for child leaf "refLeaf".
     */
    public void unsetRefLeafValue()
        throws JNCException {
        delete("refLeaf");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "refLeaf" leaf will not have a value.
     */
    public void addRefLeaf()
        throws JNCException {
        setLeafValue(Idref.NAMESPACE,
            "refLeaf",
            null,
            childrenNames());
    }

    /**
     * Marks the "refLeaf" leaf with operation "replace".
     */
    public void markRefLeafReplace()
        throws JNCException {
        markLeafReplace("refLeaf");
    }

    /**
     * Marks the "refLeaf" leaf with operation "merge".
     */
    public void markRefLeafMerge()
        throws JNCException {
        markLeafMerge("refLeaf");
    }

    /**
     * Marks the "refLeaf" leaf with operation "create".
     */
    public void markRefLeafCreate()
        throws JNCException {
        markLeafCreate("refLeaf");
    }

    /**
     * Marks the "refLeaf" leaf with operation "delete".
     */
    public void markRefLeafDelete()
        throws JNCException {
        markLeafDelete("refLeaf");
    }

    /**
     * -------------------------------------------------------
     * Support method for addChild.
     * -------------------------------------------------------
     */

    /**
     * Adds a child to this object.
     */
    public void addChild(Element $child) {
        super.addChild($child);
        
    }

}