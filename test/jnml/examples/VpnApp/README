                           VpnApp NETCONF/ConfM Demo
                           =======================

1. Purpose
==========

This example demonstrates an application using ConfM to manage routers that
are part of a Virtual Private Network.  The VpnApp application tries to
illustrate a concept where we at the manager station are managing 
concepts that are higher level, and also unknown to the individual
managed devices. Each router knows about ipsec tunnels, whereas at the
manager station, e.g. this code, we're  managing VPNs that consist of
many ipsec tunnels.

2. Topology
===========

This example uses four nodes as follows:

  * A network management station consisting of our VpnApp application running on
    top of ConfM/INM.

  * Three Virtual Private Network Gateways running ConfD.

For the sake of simplicity, the following simplifications have been made:

  * Whereas the four nodes listed above would in reality run on separate
    hardwares, in this example they are in fact running on the same machine,
    communicating over the loopback interface.

  * The VPN gateways in this demo are instances of ConfD, running on
    localhost. Each instance of ConfD runs the Quagga example from the ConfD
    example collection that resides under “examples/demo/quagga” in the ConfD
    example collection.

  * The VPN gateways are not real routers, not even real Quagga applications,
    they are primarily serving as NETCONF servers to enable this demonstration
    of ConfM.

If your ConfD node runs on a different machine than ConfM, there are a couple
of additional steps to take, please see section 5 below.


3. Prerequisites
================

In order to run this demonstration, you need the following:

  * One computer with Linux operating system installed.
  * X Windows display.
  * ConfD version 2.5 or later installed, including the example collection.
  * ConfM version 1.2 or later installed.
  * Tools to build C programs, e.g. gcc, make.
  * Java version 1.5 or later.
  * ant program.

4. Building and Running the VpnApp Demonstration
================================================

4.1 Building and Starting VPN Gateways.
=======================================

First we build and start the three VPN gateway nodes, i.e. three instances of
the ConfD Quagga example. Open a shell and set your current working directory
to the directory where the VpnApp example resides:

Source the script in the ConfM root directory:
  # cd <your confm installation dir>
  # source ./confmrc

Source the rc script in the ConfD root directory:
  # source <confd_dir>/confdrc

	or if you are using the tcsh:

  # source <confd_dir>/confdrc.tcsh

Then we build and start:
  # cd <your confm installation dir>/examples/VpnApp
  # cd confd
  # make stop clean initial all start
  # cd ..

	Verify that all three nodes have started properly:

  # cd confd
  # make status-north
  # make status-west
  # make status-east
  # cd ..

The make target "initial", builds the entire quagga example, this is needed
so that some files can be copied from that build. This step can be skipped
a later invocations.

4.2 Building and Starting VpnApp
================================

Now we build the network management station, first we generate Java classes
from the confpecs which are the data model behind the quagga example. The
confspecs are the same confspecs used in the ConfD Qagga example, copied
into this example. The generated java classes are compiled and put into a
separate jar file, i.e. model/build/jar/quagga.jar:

  # cd model
  # ant clean all
  # cd ..

Then we build Javadoc documentation for the generated classes. The result can
be found in model/build/javadoc/index.html (this is optional and not necessary
for this demonstration):

  # cd model
  # ant javadoc
  # cd ..

It is highly illustrative to compare a confspec to the generated 
Java classes manually. 


Then we build the actual VpnApp program:

  # ant

Before starting the VpnApp program, we should ensure that we start with an
empty database. The database is stored in the file SERIAL.saved. This file is
created by the VpnApp example.  If this file exists when VpnApp is started,
VpnApp will read the data from this file. In this example, we recommend
that you remove it if it exists befor starting, otherwise your VpnApp will use
the data stored in this file:

  # rm SERIAL.saved

To build and run the VpnApp in netbeans, make sure you stand in this
directory when you launch netbeans. The projects.properties file contains
relative .. paths pointing to ConfM.jar etc. 

There is a special target 'ant prepareAll' that does all of the above.x

Finally we start the VpnApp program:

  # ant run
  (or just launch from netbeans) 

A new window with the VpnApp program will start on your display.

The VpnApp Window consists of four panes:

  * Command buttons speedbar (top)
  * VPN Setup (left)
  * Network Topology (middle right)
  * Logs (bottom right.

First let us confirm that the VpnApp has established initial contact with all
three VPN gateways. In the Logs pane, click the tab "Router West Log" and
scroll log to the beginning. There should be two NETCONF messages in this log,
first a message from VpnApp to the VPN gateway asking for capabilities and a
response from the VPN gateway. Then verify the same in "Router North Log and
Router East Log".

Finally, in the Application Log tab, verify the following four messages:

  **** (<date>)
  DB is empty ... initialized to default
  
  **** (<date>)
  Router-West: Established SSH session
  
  **** (<date>)
  Router-North: Established SSH session
  
  **** (<date>)
  Router-East: Established SSH session

We are now ready to run the examples.

4.3 Examples
============

4.3.1. Adding a Virtual Private Network
=======================================

  1. In the 'VPN Setup' pane, right-click 'VPNs' icon and left-click 
     'Add VPN'. Enter a name for this VPN, e.g. 'VPN-1'. 

  2. Left-click [Secret]. Enter a string that should function as the secret
     for this VPN, e.g. 'secret-1'.

  3. Left-click the triangle arrow next to Router West icon to expand it.
     Right-click the IP address [10.7.7.4], left-click [Add Network]. Enter a
     network definition, e.g. '123.4.5.0/24'. 

     In the  Network Topology pane, the Router-West node is updated with this
     new network and VPN name.

  4. Left-click the triangle arrow next to Router-North icon to expand it.
     Right-click the IP address [10.2.2.1], left-click [Add Network]. Enter a
     network definition, e.g. '123.55.66.0/24'.

     In the  Network Topology pane, the Router North node is updated with this
     new network and VPN name. Furthermore, a dashed line between Router West
     and Router North has been added.

  5. In the Network Topology view, right-click on the [Router-West] icon,
     select 'Diff Uncommitted'.

     The Application Log in the Logs pane displays the NETCONF operations to be
     sent to the device in case the user commits this configuration.

  6. Click Commit button in the speedbar. This commits the changes to both
     routers in a single transaction. A new Window pops up asking for
     timeout. Simply press OK button to accept default timeout zero, i.e. no
     timeout. Click OK button.

     A Message Window pops up confirming commit operation. Click OK button to
     confirm message.

     In the Logs pane, NETCONF communication to Router West and Router
     North is logged.

     In the Network Topology pane, the dashed line between Router West and
     Router North is now continuous.

  7. You may want to clear all logs here. In the Log pane, left-click and
     select 'Clear All Router Logs'.

4.3.2 Commit and Confirm  a Candidate Configuration
===================================================

  1. Add a new network, e.g. 123.9.10.0/24 to Router East, see e.g. chapter
     4.3.1, step 3.

     Two new dashed lines are added to the Network Topology; one representing
     the East_North and the East-West connection respectively. The dashed line
     indicates that this change has not yet been committed to the VPN gateways.


  2. In the Command buttons speedbar, click Commit button. A new dialogue
     window is opened asking for timeout. Enter '600' to set a timeout of 600
     seconds timeout. Click OK.

     In the Command Button Speedbar, the Commit button is replaced by two
     buttons:

     * Ack (with a timeout clock running.
     * Reject

     In the Network Topology pane, all three lines are continuous indicating
     that they have been committed and are currently in operation on all VPN
     gateways.

     In the router log tabs you can see NETCONF communication to all three VPN
     gateways.

  3. In the Command Buttons speedbar, click "Ack" button.

     In the router log tabs you can see NETCONF communication to all three VPN
     gateways confirming this candidate commit.

  4. Again, you may want to clear Router logs here, see chapter 4.3.1, step 7.

4.3.2 Commit and Reject a Candidate Configuration
=================================================

  1. Add a new network to Router North, e.g. 123.57.67.0/24, see e.g. chapter
     4.3.1 step 3.

  2. Commit this new network. Set timeout to 600 seconds, see e.g. chapter
     4.3.2, step 2.

  3. In Command Buttons speedbar, click Reject button.

     In the Network Topology pane, the two lines pertaining to this new
     network has been deleted.

     In the VPN Setup pane, this new network has been deleted.

     In the Router log tabs you can see NETCONF communication to all three VPN
     gateways discarding this new configuration.

  4. Again, you may want to clear Router logs here, see chapter 4.3.1, step 7.

4.3.3. Commit Failure and Rollback
==================================

  1. Add a new network to Router North, e.g. 123.57.67.0/24, see e.g. chapter
     4.3.1 step 3.

  2. Commit this new network. Set timeout to 600 seconds, see e.g. chapter
     4.3.2 step 2.

  3. In your shell, stop Router East:

    # cd confd
    # make stop-east
    # cd ..

    VpnApp detects that the connection has been lost with Router East

    In the VPN Setup pane, the newly added network has been deleted.

    In the Network Topology pane, the Router East node is now indicated with a
    dashed red line indication that communication has been lost and the lines
    corresponding to the new network has been deleted.

    In the East and West Router log tabs you can see NETCONF communication
    discarding the addition of the new network.

  4. In your shell, restart Router East:

    # cd confd
    # make start-east

4.3.4 Transactions Requiring All Devices to be Updated Immediately
==================================================================

The VpnApp program has been designed not to backlog changes of the secret
property; if not all affected nodes are available, VpnApp will reject the
commitment of this change.

  1. In your shell, stop Router East, see chapter 4.3.3 step 1.

  2. In the VPN Setup pane, change the string used as secret,
     see. e.g. chapter 4.3.1 step 2.

  3. Commit this new secret. Set timeout to 0 seconds, see e.g. chapter 4.3.1
     step 3. 

     This transaction fails because the VPN Application enforces the policy
     that a change of the shared secret can only be done for all routers or
     none. No NETCONF messages are sent to any Router.


  3. In the Command Buttons speedbar, click Abort button.

     In the 'VPN Setup' pane, the secret is reverted to its previous value.

  4. In your shell, restart Router East, see chapter 4.3.3 step 4.

  5. Repeat step 2 and 3.

This transaction is now successfully completed.

4.3.5 Backlogging of Transactions
=================================

The VpnApp program has been designed to backlog change of Encryption property
for all affected nodes that are not available.

  1. In your shell, stop Router East, see chapter 4.3.3 step 1.

  2. In the 'VPN Setup' pane, right-click [Encryption] (at the very top) and
     select another encryption method, e.g. '3des'.

  4. Commit this new encryption. Set timeout to 0 seconds, see e.g. chapter
     4.3.1 step 3.

     In the logs for Router West and Router North, you can see that this
     change of encryption method has been committed. In the Router East log, no
     such communication has been made.

  5. In the Network Topology view, right-click on the Router East icon, select
     'Show Backlog'

     In the Application Log, the pending configuration to be sent to Router
     East is displayed.

  6. In your shell, restart Router East, see chapter 4.3.3 step 4.

     VpnApp automatically detects restart of Router East. In the logs for Router
     East you can see now that this pending change of encryption method has
     been committed to Router East.

4.3.6 Synchronization
=====================

In this example we will make a local change of the configuration in a Router
and then synchronize VpnApp.

  1.In the Network Topology view, right-click the Router-North icon, select
    'Edit in WebUI'.

    The ConfD WebUI opens in a new web browser window. 

  2. In the WebUI, enter 'admin' as Username and 'admin' as password. Click
     Login button.

  3. Click 'Edit Private'.

  4. Click the plus sign left of text 'system', then repeat for 'vpn',
     'ipsec', 'tunnel'. Finally, click on the text  'VPN-1-0'

     A table of parameters pertaining to this particular VPN tunnel is
     displayed.

  5. In the VPN tunnel configuration, under Local-net-mask, click on the IP
     address displayed. Enter a new netmask and commit the change (Green
     Commit button close to the top).

    We have now modified the configuration locally on the Router North. The
    VpnApp has now an obsolete view of the configuration of Router North.

  6. In VpnApp, in Command Buttons speedbar, click 'Inspect'.

     The inspection is implemented by retrieving the IPSEC configuration from
     the routers and comparing with the VPN Application's view. Since we have
     changed the configuration locally on Router-North, a warning message is
     displayed.

  7. In VpnApp, in Command Buttons speedbar, click 'Sync'.

     VpnApp commits its complete configuration to all routers.

  8. In WebUI, near the top, click 'View'.

  9. Repeat step 4.

     The Local-net-mask has reverted back to its original value of
     '255.255.255.0'.

4.3.7 Closing down
==================

  1. In VpnApp, click the Exit button.

  2. In a command shell, stop all three VPN gateways:

    # cd confd
    # make stop-east
    # make stop-west
    # make stop-north

5. ConfD and ConfM on different hosts
=====================================

You can also run the example above having ConfD and ConfM on separate
machines. If so, the following additional steps has to be made:

5.1 Building and Starting ConfD
===============================

On the machine where ConfD is installed, please also install ConfM.

On this machine, execute step 4.1 above to start the ConfD node.

5.2. Building and Running the ConfM examples
===========================================

The ConfM example assumes that the three ConfD servers are running on the same
machine. Edit the file src//manager/VpnApp.properties as follows

For each Router, replace the string "127.0.0.1" with the IP address or host
name of your ConfD server.
server, e.g.:

  RouterWestManagementIp=192.168.1.30

Then execute steps 4.2 thru 4.3 above.

5.3 Stopping ConfD
==================

On the machine where ConfD is installed, execute step 4.3.7 above to stop the
ConfD node.
