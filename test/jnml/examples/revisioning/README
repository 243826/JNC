                             ConfM Revisioning Example
                             =========================

1. Purpose
==========

This example demonstrates a number of ConfM features while managing 2
NETCONF capable devices using different revisions of the same data
model.

2. Topology
===========

This example uses two nodes as follows:

  * Our ConfM application.

  * Two NETCONF capable devices, in this particular example, we assume
    that Tail-f ConfD is used.

For the sake of simplicity, the following simplification has been made:

Both nodes run on the same computer and communicates over the loopback
interface (i.e. remote host is set to "localhost" on both nodes). In a real
life situation, they would normally run on different computers. If your ConfD
node runs on a different machine than ConfM, there are a couple of additional
steps to take, please see section 5 below.

3. Prerequisites
================

In order to run this demonstration, you need the following:

  * One computer with Linux operating system installed.
  * ConfD version 2.5. or later.
  * ConfM version 1.2.3 or later.
  * Tools to build C programs, e.g. gcc, make.
  * Java version 1.4 or later.
  * ant program.

4. Building and Running the ConfM Introductory Example
======================================================

4.1 Building and Starting ConfD
===============================

Open a shell and set your current working directory to the directory where
your installation of ConfD resides:

  # cd <your confd installation dir>

Source the rc script in the ConfD root directory:

  # source <confd_dir>/confdrc

        or if you are using the tcsh:

  # source <confd_dir>/confdrc.tcsh

Source the rc script in the ConfM root directory
  # cd <your confm installation dir>
  # source ./confmrc

This sets environment variable CONFM_DIR to where
ConfM was installed. This is used by the ant build.xml to
find the ConfM jar files.

Then change directory 

  # cd ${CONFM_DIR}/examples/revisioning

Build the ConfD node and start it:

  # cd confd
  # make clean all start
  # cd ..


4.2 Building ConfM Node
=======================

Now we build the ConfM side of this example. First we generate Java classes
from the data model. The data model is the file simple_v1.yang
(initial reversion of the data model) and simple_v2.yang located in
the confd subdirectory:

Set your current working directory to the directory where
this ConfM example resides:

  # cd ${CONFM_DIR}/examples/revisioning

and then:

  # ant

The subdirectory src/gen/simple has been created and populated with
Java files.

4.3 Run the Example
===============================

Run this example by doing:

  # ant run

It outputs the following:

    [java] ** Initial v1 config:
     [java] <simple xmlns="http://acme.example.com/simple" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0">
     [java]    <mode>on</mode>
     [java]    <host-metrics>12</host-metrics>
     [java] </simple>
     [java] 
     [java] ** Initial v2 config:
     [java] <simple xmlns="http://acme.example.com/simple" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0">
     [java]    <mode>speed-stepping</mode>
     [java]    <host-metrics>111</host-metrics>
     [java]    <login>
     [java]       <message>Kill your darlings...</message>
     [java]    </login>
     [java] </simple>
     [java] 
     [java] ** Final v1 config:
     [java] <simple xmlns="http://acme.example.com/simple" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0">
     [java]    <mode>off</mode>
     [java]    <host-metrics>32</host-metrics>
     [java] </simple>
     [java] 
     [java] ** Final v2 config:
     [java] <simple xmlns="http://acme.example.com/simple" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0">
     [java]    <mode>speed-stepping</mode>
     [java]    <host-metrics>100</host-metrics>
     [java]    <login>
     [java]       <message>Make me rich and famous</message>
     [java]    </login>
     [java] </simple>
     [java] 

I.e. it prints the initial and and final configuration on the the two
ConfD devices v1 and v2. It also executes a number of other operations
towards the nodes such as (see simple_v1.yang and simple_v2.yang):

  * Set "mode" to an enumeration value common for both v1 and v2,
    i.e. "off"
  * Try to set "mode" to an enumeration value unique v2,
    i.e. "speed-stepping". This will obviously work for v2 but will fail
    for v1.
  * Set "host-metrics" to an unsigned integer within the v1 value range,
    i.e. 32, for both v1 and v2.
  * Try to "host-metrics" to an unsigned integer outside of the v1 value
    range, i.e. 100. This will obviously work for v2 but will fail for
    v1.
  * Try to create a "login" presence container in both v1 and v2. This
    will obviously work for v2 but not for v1.

Inspect src/app/Main.java to be enlightened.

4.4 Stopping ConfD
===============================

After completing the examples above, stop ConfD as follows:
Build the ConfD node and start it:

  # cd confd
  # make stop
  # cd ..

5. ConfD and ConfM on different hosts
=====================================

You can also run the example above having ConfD and INM on separate
machines. If so, the following additional steps has to be made:
This is the required procedure for users using the win32 version of 
ConfM.

5.1 Building and Starting ConfD
===============================

On the machine where ConfD is installed, execute the steps above
that start ConfD

On the machine where ConfM runs, execute the ant script.

5.2. Building and Running the ConfM examples
===========================================

This example assumes that the ConfD server is running on the same
machine. Edit the file src/app/Main.java as follows:

Replace the string "localhost" with the IP address or host name of
your ConfD server.

Then rerun the ant script.
