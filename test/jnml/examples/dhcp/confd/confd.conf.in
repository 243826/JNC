<!-- -*- nxml -*- -->
<!-- This configuration is good for the examples, but are in many ways
     atypical for a production system. It also does not contain all
     possible configuration options.

     Better starting points for a production confd.conf configuration 
     file would be confd.conf.example. For even more information, see 
     the confd.conf man page.
     
     E.g. references to current directory are not good practice in a
     production system, but makes it easier to get started with
     this example. There are many references to the current directory
     in this example configuration.
-->

<confdConfig xmlns="http://tail-f.com/ns/confd_cfg/1.0">
  <!-- The loadPath is searched for .fxs files etc.
       NOTE: if you change the loadPath, the daemon must be restarted,
       confd  - -reload is not enough.
  -->

  <confdIpcAddress>
    <ip>127.0.0.1</ip>
    <port>IPC_BASE</port>
  </confdIpcAddress>


  <loadPath>
    <dir>.</dir>
    <dir>bin</dir>
    <dir>CONFD_DIR/etc/confd/</dir>
  </loadPath>
  
  <stateDir>.</stateDir>

  <cdb>
    <enabled>true</enabled>
    <dbDir>./db</dbDir>
    <operational>
      <enabled>true</enabled>
    </operational>
  </cdb> 

  <rollback>
    <enabled>true</enabled>
    <directory>./db</directory>
  </rollback>

  <!-- These keys are used to encrypt values adhering to the types
       DES3CBCEncryptedString and AESCFB128EncryptedString as defined
       in the ConfD utility namespace http://tail-f.com/ns/confd/1.0. This
       namespace is described in confd_ns(5). 
  -->
  <encryptedStrings>
    <DES3CBC>
      <key1>0123456789abcdef</key1>
      <key2>0123456789abcdef</key2>
      <key3>0123456789abcdef</key3>
      <initVector>0123456789abcdef</initVector>
    </DES3CBC>
    
    <AESCFB128>
      <key>0123456789abcdef0123456789abcdef</key>
      <initVector>0123456789abcdef0123456789abcdef</initVector>
    </AESCFB128>
  </encryptedStrings>

  <logs>
    <!-- Shared settings for how to log to syslog.
	 Each log can be configured to log to file and/or syslog.  If a
	 log is configured to log to syslog, the settings below are used.
    -->
    <syslogConfig>
      <!-- facility can be 'daemon', 'local0' ... 'local7' or an integer -->
      <facility>daemon</facility>
      <!-- if udp is not enabled, messages will be sent to local syslog -->
      <udp>
	<enabled>false</enabled>
	<host>syslogsrv.example.com</host>
	<port>514</port>
      </udp>
    </syslogConfig>

    <!-- 'confdlog' is a normal daemon log.  Check this log for
	 startup problems of confd itself.
	 By default, it logs directly to a local file, but it can be
	 configured to send to a local or remote syslog as well.
    -->
    <confdLog>
      <enabled>true</enabled>
      <file>
	<enabled>true</enabled>
	<name>./log/confd.log</name>
      </file>
      <syslog>
	<enabled>false</enabled>
      </syslog>
    </confdLog>

    <!-- The developer logs are supposed to be used as debug logs
	 for troubleshooting user-written c code.  Enable
	 and check these logs for problems with validation code etc.
    -->
    <developerLog>
      <enabled>true</enabled>
      <file>
	<enabled>true</enabled>
	<name>./log/devel.log</name>
      </file>
      <syslog>
	<enabled>false</enabled>
      </syslog>
    </developerLog>

    <auditLog>
      <enabled>true</enabled>
      <file>
	<enabled>true</enabled>
	<name>./log/audit.log</name>
      </file>
      <syslog>
	<enabled>false</enabled>
      </syslog>
    </auditLog>

    <!-- The netconf log can be used to troubleshoot NETCONF operations,
	 such as checking why e.g. a filter operation didn't return the
	 data requested.
    -->
    <netconfLog>
      <enabled>true</enabled>
      <file>
	<enabled>true</enabled>
	<name>./log/netconf.log</name>
      </file>
      <syslog>
	<enabled>false</enabled>
      </syslog>
    </netconfLog>

    <webuiAccessLog>
      <enabled>true</enabled>
      <dir>./log</dir>
    </webuiAccessLog>

    <errorLog>
      <enabled>true</enabled>
      <filename>./log/confderr.log</filename>
      <maxSize>S1M</maxSize>
    </errorLog>


  </logs>

  <!-- Defines which datastores confd will handle. -->
  <datastores>
    <!-- 'startup' means that the system keeps separate running and
	 startup configuration databases.  When the system reboots for
	 whatever reason, the running config database is lost, and the
	 startup is read.
	 Enable this only if your system uses a separate startup and
	 running database.
    -->
    <startup>
      <enabled>false</enabled>
    </startup>

    <!-- The 'candidate' is a shared, named alternative configuration
	 database which can be modified without impacting the running
	 configuration.  Changes in the candidate can be commit to running,
	 or discarded.
	 Enable this if you want your users to use this feature from
	 NETCONF, CLI or WebGUI, or other agents.
    -->
    <candidate>
      <enabled>true</enabled>
      <!-- By default, confd implements the candidate configuration
	   without impacting the application.  But if your system
	   already implements the candidate itself, set 'implementation' to
	   'external'.
      -->
      <!--implementation>external</implementation-->
      <implementation>confd</implementation>
      <storage>auto</storage>
      <filename>./db/confd_candidate.db</filename>
    </candidate>

    <!-- By default, the running configuration is writable.  This means
	 that the application must be prepared to handle changes to
	 the configuration dynamically.  If this is not the case, set
	 'access' to 'read-only'.  If running is read-only, 'startup'
	 must be enabled, and 'candidate' must be disabled.  This means that
	 the application reads the configuration at startup, and then
	 the box must reboort in order for the application to re-read it's
	 configuration.

         NOTE: this is not the same as the NETCONF capability
	 :writable-running, which merely controls which NETCONF
	 operations are allowed to write to the running configuration.
    -->
    <running>  
      <access>read-write</access>
    </running>
  </datastores>

  <aaa>
    <sshServerKeyDir>./ssh-keydir</sshServerKeyDir>
  </aaa>

  <netconf>
    <enabled>true</enabled>
    <transport>
      <ssh>
	<enabled>true</enabled>
	<ip>0.0.0.0</ip>
	<port>NETCONF_SSH_BASE</port>
      </ssh>

      <!-- NETCONF over TCP is not standardized, but it can be useful
	   during development in order to use e.g. netcat for scripting.
      -->
      <tcp>
	<enabled>true</enabled>
	<ip>127.0.0.1</ip>
	<port>NETCONF_TCP_BASE</port>
      </tcp>
    </transport>

    <capabilities>
      <!-- enable only if /confdConfig/datastores/startup is enabled -->
      <startup>
	<enabled>false</enabled>
      </startup>

      <!-- enable only if /confdConfig/datastores/candidate is enabled -->
      <candidate>
	<enabled>true</enabled>
      </candidate>

      <confirmed-commit>
	<enabled>true</enabled>
      </confirmed-commit>

      <!-- enable only if /confdConfig/datastores/writable-running is
	   enabled
      -->
      <writable-running>
	<enabled>true</enabled>
      </writable-running>

      <rollback-on-error>
	<enabled>true</enabled>
      </rollback-on-error>

      <actions>
	<enabled>true</enabled>
      </actions>

    </capabilities>
  </netconf>


  <cli>
    <enabled>true</enabled>
    <!-- To log all CLI activity use 'all', to only log
         attempts to execute unauthorized commands, use denied,
	 for only logging actually executed commands use allowed,
	 and for no logging use 'none'
    -->
    <auditLogMode>all</auditLogMode>
    <style>j</style>
    <completionShowMax>100</completionShowMax>
    <!-- Controls if transactions should be used in the CLI or not. 
	 Old style Cisco IOS does not use transactions, Juniper and
	 Cisco XR does. The commit command is disabled if transactions
	 are disabled. All modifications are applied immediately.
	 NOTE: this requires that you have default values for ALL
	 settings and no complex validation rules.
    -->
    <transactions>true</transactions>
    <showDefaults>false</showDefaults>
    <!-- Example: <banner>Welcome to the ConfD CLI</banner> -->
    <banner></banner>
    <!-- Prompt1 is used in operational mode and prompt2 in 
	 configuration mode. The string may contain a number of
	 backslash-escaped special characters that are decoded 
	 as follows:

              \d     the date in YYYY-MM-DD format (e.g., "2006-01-18")
              \h     the hostname up to the first `.'
              \H     the hostname
              \t     the current time in 24-hour HH:MM:SS format
              \T     the current time in 12-hour HH:MM:SS format
              \@     the current time in 12-hour am/pm format
              \A     the current time in 24-hour HH:MM format
              \u     the username of the current user
              \m     mode name in the Cisco-style CLI
    -->
    <prompt1>\u@\h> </prompt1>
    <prompt2>\u@\h% </prompt2>
    <cPrompt1>\h# </cPrompt1>
    <cPrompt2>\h(\m)# </cPrompt2>
    <showLogDirectory>/var/log</showLogDirectory>
    <idleTimeout>PT30M</idleTimeout>
    <commandTimeout>infinity</commandTimeout>
    <spaceCompletion>
      <enabled>true</enabled>
    </spaceCompletion>
    <autoWizard>
      <enabled>true</enabled>
    </autoWizard>
    <ssh>
      <enabled>false</enabled>
      <ip>0.0.0.0</ip>
      <port>2024</port>
    </ssh>
    <showSubsystemMessages>true</showSubsystemMessages>
    <showEmptyContainers>false</showEmptyContainers>
  </cli>


</confdConfig>
