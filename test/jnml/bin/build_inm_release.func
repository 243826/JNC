#!/bin/sh

########################################################################################
#                                                                                      #
# This script should not be invoked directly; it is called from ./bin/build_release.sh #
#                                                                                      #
########################################################################################

set_defaults ()
{
    vsn=`cat jnml/vsn.mk | grep "INM" | awk -F= '{print $2}'`

}

build_product ()
{
    if [ "$build_doc_bundle" != "only" ]; then
	ant -f jnml/build.xml inm
    fi
    if [ "$build_doc_bundle" != "no" ]; then
	ant -f jnml/build.xml javadoc user_guides
    fi
}

patch_example_build_xml ()
{
    sed -e 's#/build/jar#/jar#' -e 's#\.\./\.\./ganymed#../../jar/ganymed#' $1 > kamasutra.txt && mv kamasutra.txt $1 || exit -1
}



tar_opts="--owner=0 --group=0"
native_system=`uname -s | tr '[A-Z]' '[a-z]'`
case $native_system in
    darwin)
        tar_opts=;;
esac


build_packages ()
{
    if [ "$build_doc_bundle" != "only" ]; then
        mkdir -p ${target}/jar
        cp jnml/system/README.inm.target ${target}/README
        cp jnml/system/CHANGES ${target}/
    
        mkdir -p ${target}/jar/ganymed/
        cp jnml/ganymed/*.txt ${target}/jar/ganymed/
        cp jnml/ganymed/ganymed-ssh2-build251beta1.jar ${target}/jar/ganymed/
        cp jnml/build/jar/INM.jar ${target}/jar
    
        if [ "$build_examples" != "0" ]; then
            mkdir ${target}/examples/
            cp -r jnml/examples/inm_intro/ ${target}/examples
            find ${target}/examples -depth -name .svn -exec rm -rf {} \;
            patch_example_build_xml ${target}/examples/inm_intro/build.xml
            find ${target}/examples -name '*.java' | xargs perl -ni -e 'print unless /M3_/'
        fi
    fi
    if [ "$build_doc_bundle" != "no" ]; then
        mkdir -p ${target}/doc/javadoc
        cp -r jnml/build/javadoc/inm/* ${target}/doc/javadoc/
        cp jnml/doc/user_guides/output/pdf/inm_user_guide-${vsn}.pdf \
            ${target}/doc/user_guide-${vsn}.pdf
        (cd ${target}/doc && ln -s user_guide-${vsn}.pdf user_guide.pdf) || exit 1
    fi

# remove any .svn directory in the target structure
find ${target} -depth -name .svn -exec rm -rf {} \;

if [ -z "$variant" ]; then
    INM_PACKAGE="inm-${vsn}"
    DOC_PACKAGE="inm-${vsn}.doc"
    JAR_PACKAGE="inm-${vsn}.jars"
else
    INM_PACKAGE="inm-${vsn}.${variant}"
    DOC_PACKAGE="inm-${vsn}.${variant}.doc"
    JAR_PACKAGE="inm-${vsn}.${variant}.jars"
fi

    (
        cd ${pkgdir}
    
	if [ $build_doc_bundle != "no" ]; then
            echo "Creating documentation package."
            ($TAR -cf ${DOC_PACKAGE}.tar ${tar_opts} ${product}-${vsn}/doc && \
		gzip -9 ${DOC_PACKAGE}.tar) || exit 1
	fi
    
	if [ $build_doc_bundle != "only" ]; then
	    if [ $build_lib_bundle = "yes" ]; then
                echo "Creating JAR package.."
                ($TAR -cf ${JAR_PACKAGE}.tar ${tar_opts} ${product}-${vsn}/jar && \
    		gzip -9 ${JAR_PACKAGE}.tar) || exit 1
	    fi

            echo "Creating product package..."
            ($TAR -cf ${INM_PACKAGE}.tar ${tar_opts} ${product}-${vsn} && \
		gzip -9 ${INM_PACKAGE}.tar) || exit 1
	fi

    )
}


build_test_packages ()
{
   echo "Test packet for INM not supported"
}